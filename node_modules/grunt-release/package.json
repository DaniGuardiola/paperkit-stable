{
  "name": "grunt-release",
  "version": "0.11.0",
  "description": "Release a new version of your Node-based project",
  "main": "Gruntfile.js",
  "scripts": {
    "test": "grunt test"
  },
  "engines": {
    "node": ">=0.10"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/geddski/grunt-release.git"
  },
  "keywords": [
    "gruntplugin",
    "bump",
    "release",
    "npm",
    "git"
  ],
  "author": {
    "name": "Dave Geddes"
  },
  "license": "MIT",
  "dependencies": {
    "shelljs": "^0.3.0",
    "semver": "^4.1.0",
    "superagent": "^0.21.0",
    "q": "^1.1.2"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-clean": "^0.6.0"
  },
  "peerDependencies": {
    "grunt": "^0.4.1"
  },
  "readme": "# grunt-release\n\n[![Build Status](https://travis-ci.org/geddski/grunt-release.svg?branch=master)](https://travis-ci.org/geddski/grunt-release)\n[![Dependency Status](https://david-dm.org/geddski/grunt-release.svg)](https://david-dm.org/geddski/grunt-release)\n[![devDependency Status](https://david-dm.org/geddski/grunt-release/dev-status.svg)](https://david-dm.org/geddski/grunt-release#info=devDependencies)\n\n[Grunt](http://gruntjs.com) plugin for automating all the release steps of your node lib or bower component, with optional publishing to npm.\n\n## Repetition Killed the Cat\nReleasing a new version of your killer Node/Bower/Component/JS lib looks something like this:\n\n1. bump the version in your `package.json` file.\n2. stage the package.json file's change.\n3. commit that change with a message like \"release 0.6.22\".\n4. create a new git tag for the release.\n5. push the changes out to github.\n6. also push the new tag out to github.\n7. create a .zip release on github.\n8. publish the new version to npm.\n\nCool, right? No! What's wrong with you? Automate all that:\n\n```shell\ngrunt release\n```\n\nDone. No more github issues from angry people reminding you how often you forget to do one or more of the steps.\n\n## Setup\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-release --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-release');\n```\n\n## Using grunt-release\n\n**Patch Release:**\n```shell\ngrunt release\n```\nor\n```shell\ngrunt release:patch\n```\n\n**Minor Release:**\n```shell\ngrunt release:minor\n```\n\n**Major Release:**\n```shell\ngrunt release:major\n```\n\n**Pre-release**\n```shell\ngrunt release:prerelease\n```\n\n`prerelease` will just update the number after `MAJOR.MINOR.PATCH` (eg: `1.0.0-1`)\nIf you want to add an alphanumeric identifier, you will need to add it by hand.\nExample: add `-alpha.0` to get something like `1.0.0-alpha.0`. Calling `grunt release:prerelease` will just update the last number to `1.0.0-alpha.1`.\n\n**Releasing Unstable/Beta Versions**\nSometimes it is useful to publish an 'unstable' or 'beta' version to `npm`, while leaving your last stable release as the default that gets installed on an `npm install`.\n`npm` accomplishes this using the `--tag myUnstableVersion` flag. You can enable this flag in grunt-release either by setting the `npmtag` option:\n\n```js\n  release: {\n    options: {\n      npmtag: 'canary',\n    }\n  }\n```\n\nor by passing the CLI arg:\n\n```shell\ngrunt release --npmtag canary\n```\n\nNOTE: If the tag you pass is **true**, then the tag will be the *new* version number after the bump. Otherwise it will be the string you provided.\n\n\n**Bump multuple files at once**\n\nSometimes you may need to bump multiple files while releasing.\n\n```js\n  release: {\n    options: {\n      additionalFiles: ['bower.json']\n    }\n  }\n```\n\nYou can also provide multiple files in this array or provide a string with multiple file paths separated by comma (`,`).\n\nThe version to bump is set in the master file defined with option 'file' (default : package.json).\nThis version will be propagated to every additionalFiles.\n\n**Dry Run:**\nTo see what grunt-release does, without really changing anything, use `--no-write` option.\n\n```shell\ngrunt release --no-write\n```\n\nYou'll see something like:\n```\n>> Release dry run\n>> bumped version to 0.8.0\n>> staged package.json\n>> committed package.json\n>> created new git tag: 0.8.0\n>> pushed to remote git repo\n>> pushed new tag 0.8.0 to remote git repo\n>> published version 0.8.0 to npm\n>> created 0.8.0 release on github.\n\nDone, without errors.\n```\n\n## Options\nThe following are all the release steps, you can disable any you need to:\n\n```js\n  release: {\n    options: {\n      bump: false, //default: true\n      changelog: true, //default: false\n      changelogText: '<%= version %>\\n', //default: '### <%= version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\\n'\n      file: 'component.json', //default: package.json\n      add: false, //default: true\n      commit: false, //default: true\n      tag: false, //default: true\n      push: false, //default: true\n      pushTags: false, //default: true\n      npm: false, //default: true\n      npmtag: true, //default: no tag\n      indentation: '\\t', //default: '  ' (two spaces)\n      folder: 'folder/to/publish/to/npm', //default project root\n      tagName: 'some-tag-<%= version %>', //default: '<%= version %>'\n      commitMessage: 'check out my release <%= version %>', //default: 'release <%= version %>'\n      tagMessage: 'tagging version <%= version %>', //default: 'Version <%= version %>',\n      beforeBump: [], // optional grunt tasks to run before file versions are bumped\n      afterBump: [], // optional grunt tasks to run after file versions are bumped\n      beforeRelease: [], // optional grunt tasks to run after release version is bumped up but before release is packaged\n      afterRelease: [], // optional grunt tasks to run after release is packaged\n      github: {\n        repo: 'geddski/grunt-release', //put your user/repo here\n        usernameVar: 'GITHUB_USERNAME', //ENVIRONMENT VARIABLE that contains Github username\n        passwordVar: 'GITHUB_PASSWORD' //ENVIRONMENT VARIABLE that contains Github password\n      }\n    }\n  }\n```\n\nIf you want to use multiline commit messages just pass an array to the `commitMessage` option instead of a string.\n\n### Notes on Github Releases:\n1. Yes, you have to use environment variables. I would be a terrible person if I let you check in your username and password into your source code.\n2. The [Github Releases API](http://developer.github.com/v3/repos/releases/) is still unstable and may change in the future.\n3. You can use an [access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use) if you'd rather.\n\nFor node libs, leave `file` option blank as it will default to `package.json`. For Bower components, set it to `bower.json`.\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/geddski/grunt-release/issues"
  },
  "_id": "grunt-release@0.11.0",
  "_from": "grunt-release@"
}
